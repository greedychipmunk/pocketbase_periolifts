import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../models/workout_plan.dart';
import '../services/workout_service.dart';
import '../services/auth_service.dart';
import '../widgets/base_layout.dart';
import 'workout_plan_calendar_screen.dart';
import 'login_screen.dart';

class WorkoutPlansScreen extends StatefulWidget {
  final WorkoutService workoutService;
  final AuthService authService;
  final VoidCallback onAuthError;

  const WorkoutPlansScreen({
    Key? key, 
    required this.workoutService,
    required this.authService,
    required this.onAuthError,
  }) : super(key: key);

  @override
  State<WorkoutPlansScreen> createState() => _WorkoutPlansScreenState();
}

class _WorkoutPlansScreenState extends State<WorkoutPlansScreen> {
  List<WorkoutPlan> workoutPlans = [];
  bool isLoading = true;

  void _handleAuthError() {
    Navigator.of(context).pushReplacement(
      MaterialPageRoute(
        builder: (context) => LoginScreen(
          authService: widget.workoutService as dynamic,
        ),
      ),
    );
  }

  Future<void> _loadWorkoutPlans() async {
    if (!mounted) return;

    setState(() => isLoading = true);
    try {
      final plans = await widget.workoutService.getWorkoutPlans();
      if (mounted) {
        setState(() {
          workoutPlans = plans;
          isLoading = false;
        });
      }
    } catch (e) {
      if (e is AuthenticationException) {
        _handleAuthError();
      } else {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error loading workout plans: $e')),
          );
          setState(() => isLoading = false);
        }
      }
    }
  }

  Future<void> _createWorkoutPlan() async {
    final result = await showDialog<Map<String, String>>(
      context: context,
      builder: (context) => _CreateWorkoutPlanDialog(),
    );

    if (result != null) {
      try {
        final plan = WorkoutPlan(
          id: '',
          userId: '',
          name: result['name']!,
          description: result['description']!,
          createdAt: DateTime.now(),
          startDate: result['startDate'] as DateTime,
          schedule: {},
        );

        final createdPlan = await widget.workoutService.createWorkoutPlan(plan);
        setState(() {
          workoutPlans.add(createdPlan);
        });
      } catch (e) {
        _showError('Failed to create workout plan');
      }
    }
  }

  void _showError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message), backgroundColor: Colors.red),
    );
  }

  @override
  void initState() {
    super.initState();
    _loadWorkoutPlans();
  }

  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      return BaseLayout(
        workoutService: widget.workoutService,
        authService: widget.authService,
        onAuthError: widget.onAuthError,
        currentIndex: 1, // Programs tab
        title: 'Workout Plans',
        child: const Center(child: CircularProgressIndicator()),
      );
    }

    return BaseLayout(
      workoutService: widget.workoutService,
      authService: widget.authService,
      onAuthError: widget.onAuthError,
      currentIndex: 1, // Programs tab
      title: 'Workout Plans',
      actions: [
        IconButton(
          icon: const Icon(Icons.add),
          onPressed: _createWorkoutPlan,
        ),
      ],
      child: workoutPlans.isEmpty
          ? Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Text(
                    'No workout plans yet',
                    style: TextStyle(fontSize: 18),
                  ),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: _createWorkoutPlan,
                    child: const Text('Create Your First Plan'),
                  ),
                ],
              ),
            )
          : ListView.builder(
              itemCount: workoutPlans.length,
              itemBuilder: (context, index) {
                final plan = workoutPlans[index];
                return Card(
                  margin: const EdgeInsets.all(8.0),
                  child: ListTile(
                    title: Text(plan.name),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Text(plan.description),
                        Text(
                          'Starts ${DateFormat('MMM d, y').format(plan.startDate)}',
                          style: Theme.of(context).textTheme.bodySmall,
                        ),
                      ],
                    ),
                    trailing: Text('${plan.schedule.isEmpty ? 0 : plan.schedule.values.expand((i) => i).length} workouts'),
                    onTap: () => _navigateToWorkoutPlan(plan),
                  ),
                );
              },
            ),
    );
  }

  void _navigateToWorkoutPlan(WorkoutPlan plan) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => WorkoutPlanCalendarScreen(
          workoutService: widget.workoutService,
          workoutPlan: plan,
        ),
      ),
    );
  }
}

class _CreateWorkoutPlanDialog extends StatefulWidget {
  @override
  State<_CreateWorkoutPlanDialog> createState() =>
      _CreateWorkoutPlanDialogState();
}

class _CreateWorkoutPlanDialogState extends State<_CreateWorkoutPlanDialog> {
  final _nameController = TextEditingController();
  final _descriptionController = TextEditingController();
  DateTime _startDate = DateTime.now();

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  Future<void> _selectDate(BuildContext context) async {
    final picked = await showDatePicker(
      context: context,
      initialDate: _startDate,
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
    );
    if (picked != null) {
      setState(() {
        _startDate = picked;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('Create Workout Plan'),
      content: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: _nameController,
              decoration: const InputDecoration(labelText: 'Plan Name'),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _descriptionController,
              decoration: const InputDecoration(labelText: 'Description'),
              maxLines: 3,
            ),
            const SizedBox(height: 16),
            ListTile(
              title: const Text('Start Date'),
              subtitle: Text(DateFormat('MMMM d, y').format(_startDate)),
              trailing: const Icon(Icons.calendar_today),
              onTap: () => _selectDate(context),
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('Cancel'),
        ),
        TextButton(
          onPressed: () {
            if (_nameController.text.isEmpty) {
              return;
            }
            Navigator.pop(context, {
              'name': _nameController.text,
              'description': _descriptionController.text.isEmpty ? '' : _descriptionController.text,
              'startDate': _startDate,
            });
          },
          child: const Text('Create'),
        ),
      ],
    );
  }
}
